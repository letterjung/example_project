{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " * Running on http://127.0.0.1:8050/ (Press CTRL+C to quit)\n",
      "127.0.0.1 - - [02/Dec/2018 17:40:50] \"GET / HTTP/1.1\" 200 -\n",
      "127.0.0.1 - - [02/Dec/2018 17:40:53] \"GET /_dash-layout HTTP/1.1\" 200 -\n",
      "127.0.0.1 - - [02/Dec/2018 17:40:53] \"GET /_dash-dependencies HTTP/1.1\" 200 -\n",
      "127.0.0.1 - - [02/Dec/2018 17:40:53] \"POST /_dash-update-component HTTP/1.1\" 200 -\n",
      "127.0.0.1 - - [02/Dec/2018 17:40:53] \"POST /_dash-update-component HTTP/1.1\" 200 -\n",
      "127.0.0.1 - - [02/Dec/2018 17:40:57] \"GET /favicon.ico HTTP/1.1\" 200 -\n",
      "127.0.0.1 - - [02/Dec/2018 17:41:12] \"POST /_dash-update-component HTTP/1.1\" 200 -\n",
      "127.0.0.1 - - [02/Dec/2018 17:41:20] \"POST /_dash-update-component HTTP/1.1\" 200 -\n",
      "127.0.0.1 - - [02/Dec/2018 17:42:23] \"POST /_dash-update-component HTTP/1.1\" 200 -\n"
     ]
    }
   ],
   "source": [
    "# Final Project\n",
    "\n",
    "# Create a Dashboard taking data from [Eurostat, GDP and main components (output, expenditure and income)](http://ec.europa.eu/eurostat/web/products-datasets/-/nama_10_gdp). \n",
    "# The dashboard will have two graphs: \n",
    "\n",
    "# * The first one will be a scatterplot with two DropDown boxes for the different indicators. It will have also a slide for the different years in the data. \n",
    "# * The other graph will be a line chart with two DropDown boxes, one for the country and the other for selecting one of the indicators. (hint use Scatter object using mode = 'lines' [(more here)](https://plot.ly/python/line-charts/) \n",
    "\n",
    "app.css.append_css({\"external_url\": \"https://codepen.io/chriddyp/pen/bWLwgP.css\"})\n",
    "import dash\n",
    "from dash.dependencies import Input, Output\n",
    "import dash_core_components as dcc\n",
    "import dash_html_components as html\n",
    "import pandas as pd\n",
    "import plotly.graph_objs as go\n",
    "\n",
    "\n",
    "eurostat = pd.read_csv(\"nama_10_gdp_1_Data.csv\")\n",
    "\n",
    "available_indicators = eurostat['NA_ITEM'].unique()\n",
    "\n",
    "available_countries = eurostat['GEO'].unique()\n",
    "\n",
    "\n",
    "# Creating the Dashboard for Graph 1 & 2:\n",
    "\n",
    "app = dash.Dash(__name__)\n",
    "server = app.server\n",
    "app.css.append_css({\"external_url\": \"https://codepen.io/chriddyp/pen/bWLwgP.css\"})\n",
    "\n",
    "\n",
    "\n",
    "# Creating the data frame for the units:\n",
    "\n",
    "eurostat_1 = eurostat[eurostat['UNIT'] == 'Current prices, million euro']\n",
    "\n",
    "\n",
    "app.layout = html.Div([\n",
    "\n",
    "#Graph 1    \n",
    "#I create the layout of the first dropdown and set the default value for my graph - Gross domestic product at market prices\n",
    "# name of the x-axis is: xaxis-columns, and same for the yaxis = yaxiscolumns \n",
    "#first graph name = graph1\n",
    "    \n",
    "    html.Div([\n",
    "        html.Div([\n",
    "            dcc.Dropdown( \n",
    "                id='xaxis-column1',\n",
    "                options=[{'label': i, 'value': i} for i in available_indicators],\n",
    "                value='Gross domestic product at market prices'\n",
    "            )\n",
    "        ],\n",
    "        style={'width': '30%', 'display': 'inline-block'}),\n",
    "        html.Div([\n",
    "            dcc.Dropdown( \n",
    "                id='yaxis-column1',\n",
    "                options=[{'label': i, 'value': i} for i in available_indicators],\n",
    "                value='Wages and salaries'\n",
    "            )\n",
    "        ],style={'width': '30%', 'float': 'right', 'display': 'inline-block'})\n",
    "    ]),\n",
    "    dcc.Graph(id='graph1'),\n",
    "    html.Div(dcc.Slider( \n",
    "        id='year--slider',\n",
    "        min=eurostat['TIME'].min(),\n",
    "        max=eurostat['TIME'].max(),\n",
    "        value=eurostat['TIME'].max(),\n",
    "        step=None,\n",
    "        marks={str(time): str(time) for time in eurostat['TIME'].unique()},\n",
    "    ), style={'marginRight': 50, 'marginLeft': 110},),\n",
    "\n",
    "#Second chart\n",
    "# Second graph name is id graph2\n",
    "    \n",
    "    html.Div([\n",
    "        \n",
    "        html.Div([\n",
    "            dcc.Dropdown( \n",
    "                id='xaxis-column2',\n",
    "                options=[{'label': i, 'value': i} for i in available_indicators],\n",
    "                value='Gross domestic product at market prices'\n",
    "            )\n",
    "        ],\n",
    "        style={'width': '30%', 'marginTop': 40, 'display': 'inline-block'}),\n",
    "\n",
    "        html.Div([\n",
    "            dcc.Dropdown( \n",
    "                id='yaxis-column2',\n",
    "                options=[{'label': i, 'value': i} for i in available_countries],\n",
    "                value= \"Spain\"    \n",
    "            )\n",
    "        ],style={'width': '30%', 'marginTop': 40, 'float': 'right', 'display': 'inline-block'})\n",
    "     ]),\n",
    "     dcc.Graph(id='graph2'),\n",
    "])\n",
    "\n",
    "\n",
    "#This is the call back function for the first graph\n",
    "\n",
    "@app.callback(\n",
    "    dash.dependencies.Output('graph1', 'figure'),\n",
    "    [dash.dependencies.Input('xaxis-column1', 'value'),\n",
    "     dash.dependencies.Input('yaxis-column1', 'value'),\n",
    "     dash.dependencies.Input('year--slider', 'value')])\n",
    "\n",
    "\n",
    "#Dataframe for the time\n",
    "\n",
    "def update_graph(xaxis_column_name, yaxis_column_name,\n",
    "                 year_value):\n",
    "    \n",
    "    eurostatframe = eurostat[eurostat['TIME'] == year_value]\n",
    "    return {\n",
    "        'data': [go.Scatter(\n",
    "            x=eurostatframe[eurostatframe['NA_ITEM'] == xaxis_column_name]['Value'],\n",
    "            y=eurostatframe[eurostatframe['NA_ITEM'] == yaxis_column_name]['Value'],\n",
    "            text=eurostatframe[eurostatframe['NA_ITEM'] == yaxis_column_name]['GEO'],\n",
    "            mode='markers',\n",
    "            marker={\n",
    "                'size': 15,\n",
    "                'opacity': 0.5,\n",
    "                'line': {'width': 0.5, 'color': 'white'}\n",
    "            }\n",
    "        )],\n",
    "        'layout': go.Layout(\n",
    "            xaxis={\n",
    "                'title': xaxis_column_name,\n",
    "                'type': 'linear'\n",
    "            },\n",
    "            yaxis={\n",
    "                'title': yaxis_column_name,\n",
    "                'type': 'linear'\n",
    "            },\n",
    "            margin={'l': 110, 'b': 50, 't': 20, 'r': 50},\n",
    "            hovermode='closest'\n",
    "        )\n",
    "    }\n",
    "\n",
    "\n",
    "#This is the call back function for the second chart\n",
    "@app.callback(\n",
    "    dash.dependencies.Output('graph2', 'figure'),\n",
    "    [dash.dependencies.Input('xaxis-column2', 'value'),\n",
    "     dash.dependencies.Input('yaxis-column2', 'value')])\n",
    "\n",
    "\n",
    "\n",
    "#As here I have all of the years I just have to update the column names of the chart\n",
    "\n",
    "def update_graph(xaxis_column_name, yaxis_column_name):\n",
    "    \n",
    "\n",
    "\n",
    "    eurostatframe = eurostat_1[eurostat_1['GEO'] == yaxis_column_name]\n",
    "    return {\n",
    "        'data': [go.Scatter(\n",
    "            x=eurostatframe['TIME'].unique(),\n",
    "            y=eurostatframe[eurostatframe['NA_ITEM'] == xaxis_column_name]['Value'],\n",
    "            mode='lines',\n",
    "            marker={\n",
    "                'size': 15,\n",
    "                'opacity': 0.5,\n",
    "                'line': {'width': 0.5, 'color': 'white'}\n",
    "            }\n",
    "        )],\n",
    "        'layout': go.Layout(\n",
    "            xaxis={\n",
    "                'title': xaxis_column_name,\n",
    "                'type': 'linear'\n",
    "            },\n",
    "            yaxis={\n",
    "                'title': yaxis_column_name,\n",
    "                'type': 'linear'\n",
    "            },\n",
    "            margin={'l': 110, 'b': 50, 't': 20, 'r': 50},\n",
    "            hovermode='closest'\n",
    "        )\n",
    "    }\n",
    "\n",
    "\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    app.run_server()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
